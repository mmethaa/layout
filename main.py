import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score

st.set_page_config(page_title="Smart Layout AI", page_icon="üåáÔ∏è", layout="centered")

st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0f4f8;
    }
    .stButton>button {
        background: linear-gradient(to right, #0f4c75, #3282b8);
        color: white;
        font-size: 18px;
        border-radius: 10px;
        padding: 0.6em 2em;
    }
    div[data-testid="metric-container"] {
        background-color: white;
        border-radius: 12px;
        padding: 1em;
        margin: 10px 0;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.08);
    }
    div[data-testid="metric-container"] > label, div[data-testid="metric-container"] > div {
        color: #1f2937 !important;
        font-weight: 600;
        font-size: 18px;
    }
    </style>
""", unsafe_allow_html=True)

sheet_name = "Sheet1"
df = pd.read_excel("layoutdata.xlsx", sheet_name=sheet_name)
df.columns = df.columns.str.strip()

# Convert all area units from sqm to sq.wah
sqm_to_sqwah = 0.25
df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'] *= sqm_to_sqwah
df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'] *= sqm_to_sqwah
df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] *= sqm_to_sqwah
df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)'] *= sqm_to_sqwah
df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏°'] *= sqm_to_sqwah

# House dimension conversion
house_dims = {
    '‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': (5, 16),
    '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': (10, 16),
    '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': (15, 18)
}

for htype, (w, l) in house_dims.items():
    df[f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á({htype})'] = w
    df[f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß({htype})'] = l
    df[f'‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢({htype})'] = w * l

# Add area ratios
house_types = ['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå']
for h in house_types:
    col_name = f'{h}_prop'
    df[col_name] = df[h] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)

# Add dummy rules for certain grades that only allow ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
grade_rules = {
    g: {'‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': 1.0} for g in df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].unique() if ((df[df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] == g][['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°','‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î','‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå']].sum().sum()) == 0)
}

avg_public_area_ratio = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'].sum() / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].sum()
avg_distributable_area_ratio = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'].sum() / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].sum()
avg_road_area_ratio = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏°'].sum() / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].sum()
avg_units_per_dist_area = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].sum() / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'].sum()
avg_alley_per_unit = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'].sum() / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].sum()
avg_alley_per_dist_area = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'].sum() / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'].sum()

AREA_TH = house_dims['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'][0] * house_dims['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'][1]
AREA_BA = house_dims['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'][0] * house_dims['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'][1]
AREA_BD = house_dims['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'][0] * house_dims['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'][1]

# Create mapping for grade + shape proportions
grade_land_shape_proportions = df.groupby(['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£','‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'])[[f'{h}_prop' for h in house_types]].mean()

# Finished setup ‚Äî next phase would include prediction functions and UI integration

st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
# --- 3. Prediction Function (Internal, works with SQM) ---
# This function will work internally with SQM, and the main UI function will handle SQW conversion
def predict_project_layout_internal(
    project_area_sqm_input: float, # Input is expected in SQM here
    land_shape: str,
    project_grade: str,
    province: str # Province is currently not used in prediction logic but kept for future expansion
) -> dict:
    """
    Predicts various layout metrics for a new project based on historical data.
    All internal calculations are in Square Meters.
    """
    project_area_sqm = project_area_sqm_input # Use this variable for calculations

    # 1. Predict Area Allocations
    predicted_public_area = project_area_sqm * avg_public_area_ratio
    predicted_distributable_area = project_area_sqm * avg_distributable_area_ratio
    predicted_garden_area = predicted_distributable_area * 0.05 # Assuming 5% of distributable for garden
    predicted_road_area = project_area_sqm * avg_road_area_ratio

    # 2. Predict Number of Units by Type and Total Units
    predicted_units = {
        '‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': 0,
        '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': 0,
        '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': 0,
        '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô': 0,
        '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': 0
    }
    total_predicted_units = 0

    # Get proportions based on Grade and Land Shape
    proportions_key = (project_grade, land_shape)
    if proportions_key in grade_land_shape_proportions.index:
        proportions_series = grade_land_shape_proportions.loc[proportions_key]
        proportions_df = proportions_series.to_frame().T # Convert to DataFrame row for consistent access
    else:
        proportions_df = None # No specific historical data for this combination

    # Apply grade-specific rules first
    if project_grade in grade_rules:
        # For LUXURY, set all others to 0 and ensure ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß takes all proportion
        if project_grade == 'LUXURY':
            for h_type in house_types: # Ensure 'house_types' is the corrected list
                if h_type != '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß':
                    predicted_units[h_type] = 0
            remaining_house_types = ['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß']
        else: # For other grades with rules (e.g., PREMIUM)
            for h_type, value in grade_rules[project_grade].items():
                predicted_units[h_type] = value
            remaining_house_types = [h for h in house_types if h not in grade_rules[project_grade]]
        
        # Calculate base units from distributable area
        estimated_total_units_from_area = 0
        if not np.isnan(avg_units_per_dist_area) and avg_units_per_dist_area > 0:
            estimated_total_units_from_area = round(predicted_distributable_area * avg_units_per_dist_area)

        # Distribute remaining units based on proportions
        if proportions_df is not None:
            current_proportions = proportions_df[[f'{h_type}_prop' for h_type in remaining_house_types]].values.flatten()
            if current_proportions.sum() > 0:
                current_proportions /= current_proportions.sum() # Normalize remaining proportions
            else: # Fallback to general average if normalized sum is zero (shouldn't happen if data exists for remaining types)
                general_avg_props_remaining = df[[f'{h_type}_prop' for h_type in remaining_house_types]].mean().values
                if general_avg_props_remaining.sum() > 0:
                    current_proportions = general_avg_props_remaining / general_avg_props_remaining.sum()
                else: # If still zero, distribute equally among remaining if any
                    if len(remaining_house_types) > 0:
                        current_proportions = np.ones(len(remaining_house_types)) / len(remaining_house_types)
                    else:
                        current_proportions = np.array([]) # No remaining types

        else: # Fallback to general average if no specific proportions found for grade/shape
            general_avg_props_remaining = df[[f'{h_type}_prop' for h_type in remaining_house_types]].mean().values
            if general_avg_props_remaining.sum() > 0:
                current_proportions = general_avg_props_remaining / general_avg_props_remaining.sum()
            else: # If still zero, distribute equally among remaining if any
                if len(remaining_house_types) > 0:
                    current_proportions = np.ones(len(remaining_house_types)) / len(remaining_house_types)
                else:
                    current_proportions = np.array([]) # No remaining types


        # Distribute estimated total units among remaining house types
        temp_predicted_remaining_units = {}
        for i, h_type in enumerate(remaining_house_types):
            if i < len(current_proportions): # Ensure index is within bounds
                temp_predicted_remaining_units[h_type] = round(estimated_total_units_from_area * current_proportions[i])
        
        # Merge back with already set units (e.g., those fixed at 0 by grade rules)
        for h_type in remaining_house_types:
            predicted_units[h_type] = temp_predicted_remaining_units.get(h_type, 0)


        # Refine units based on area consumed by primary types (TH, BA, BD)
        total_area_consumed_by_calculated_types = (predicted_units['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] * AREA_TH +
                                              predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] * AREA_BA +
                                              predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] * AREA_BD)
        
        if total_area_consumed_by_calculated_types > 0 and predicted_distributable_area > 0:
            scale_factor = predicted_distributable_area / total_area_consumed_by_calculated_types
            for h_type in ['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß']: # Only scale types with defined areas
                predicted_units[h_type] = round(predicted_units[h_type] * scale_factor)

    else: # No specific grade rules, use average proportions for the given grade/land shape
        # Calculate base units from distributable area
        estimated_total_units_from_area = 0
        if not np.isnan(avg_units_per_dist_area) and avg_units_per_dist_area > 0:
            estimated_total_units_from_area = round(predicted_distributable_area * avg_units_per_dist_area)
            
        if proportions_df is not None:
            # Use specific proportions if available
            for h_type in house_types:
                predicted_units[h_type] = round(estimated_total_units_from_area * proportions_df[f'{h_type}_prop'].iloc[0])
        else:
            # Fallback to general average proportions if no specific (grade, land_shape) combo found
            general_avg_props = df[[f'{h_type}_prop' for h_type in house_types]].mean()
            if general_avg_props.sum() > 0:
                general_avg_props /= general_avg_props.sum() # Normalize
            for h_type in house_types:
                predicted_units[h_type] = round(estimated_total_units_from_area * general_avg_props[f'{h_type}_prop'])
        
        # Refine units based on area consumed if possible
        total_area_consumed_by_known_types = (predicted_units['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] * AREA_TH +
                                              predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] * AREA_BA +
                                              predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] * AREA_BD)
        
        if total_area_consumed_by_known_types > 0 and predicted_distributable_area > 0:
            scale_factor = predicted_distributable_area / total_area_consumed_by_known_types
            for h_type in ['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß']:
                predicted_units[h_type] = round(predicted_units[h_type] * scale_factor)
                
    total_predicted_units = sum(predicted_units.values())

    # 3. Predict Number of Alleys (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢)
    predicted_alleys = 0
    if total_predicted_units > 0 and not np.isnan(avg_alley_per_unit):
        predicted_alleys = round(total_predicted_units * avg_alley_per_unit)
    elif predicted_distributable_area > 0 and not np.isnan(avg_alley_per_dist_area):
        predicted_alleys = round(predicted_distributable_area * avg_alley_per_dist_area)
    
    predicted_alleys = max(1, predicted_alleys) # At least one alley for a project.


    return {
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£‡∏°.)': round(project_area_sqm, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤ (‡∏ï‡∏£‡∏°.)': round(predicted_public_area, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ (‡∏ï‡∏£‡∏°.)': round(predicted_distributable_area, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô (‡∏ï‡∏£‡∏°.)': round(predicted_garden_area, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡∏ï‡∏£‡∏°.)': round(predicted_road_area, 2),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°)': max(0, predicted_units['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°']),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)': max(0, predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î']),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)': max(0, predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß']),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô)': max(0, predicted_units['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô']),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)': max(0, predicted_units['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå']),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏ß‡∏°)': max(0, total_predicted_units),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢': max(1, predicted_alleys)
    }

# --- Calculate Model Performance Metrics on Historical Data ---
# This part runs once when the app starts to show overall model accuracy
actual_total_units = []
predicted_total_units_for_metrics = []
actual_distributable_areas = [] # In SQM
predicted_distributable_areas_for_metrics = [] # In SQM
actual_alleys = []
predicted_alleys_for_metrics = []

for index, row in df.iterrows():
    # Make sure to pass project_area_sqm to the function, which will be converted inside
    # We are calculating metrics based on actual historical data that is in SQM
    
    # Check if necessary columns exist before proceeding for metrics calculation
    if '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)' in row and '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô' in row and \
       '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£' in row and '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' in row and \
       '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á' in row and '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)' in row and '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢' in row:
        
        pred_metrics = predict_project_layout_internal( # Use internal function that expects SQM
            project_area_sqm_input=row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'],
            land_shape=row['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'],
            project_grade=row['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'],
            province=row['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']
        )
        
        actual_total_units.append(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'])
        predicted_total_units_for_metrics.append(pred_metrics['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏ß‡∏°)'])
        
        actual_distributable_areas.append(row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'])
        predicted_distributable_areas_for_metrics.append(pred_metrics['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ (‡∏ï‡∏£‡∏°.)'])
        
        actual_alleys.append(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'])
        predicted_alleys_for_metrics.append(pred_metrics['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'])
    else:
        st.warning(f"‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {index} ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Metrics")


metrics_total_units = calculate_metrics(actual_total_units, predicted_total_units_for_metrics)
metrics_dist_area = calculate_metrics(actual_distributable_areas, predicted_distributable_areas_for_metrics)
metrics_alleys = calculate_metrics(actual_alleys, predicted_alleys_for_metrics)


# --- 4. Main Prediction Function (User-facing, handles SQW) ---
def predict_project_layout_sqw(
    project_area_sqw_input: float, # Input is in Square Wah
    land_shape: str,
    project_grade: str,
    province: str
) -> dict:
    """
    Predicts layout metrics, converting input from Square Wah to Square Meters internally
    and converting results back to Square Wah for display.
    """
    # Convert input from Square Wah to Square Meters for internal calculations
    project_area_sqm = project_area_sqw_input * 4

    # Call the internal prediction function that uses SQM
    results_sqm = predict_project_layout_internal(
        project_area_sqm_input=project_area_sqm,
        land_shape=land_shape,
        project_grade=project_grade,
        province=province
    )

    # Convert relevant results back to Square Wah for display
    results_sqw = {
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£‡∏ß.)': round(project_area_sqw_input, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤ (‡∏ï‡∏£‡∏ß.)': round(results_sqm['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤ (‡∏ï‡∏£‡∏°.)'] / 4, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ (‡∏ï‡∏£‡∏ß.)': round(results_sqm['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ (‡∏ï‡∏£‡∏°.)'] / 4, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô (‡∏ï‡∏£‡∏ß.)': round(results_sqm['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô (‡∏ï‡∏£‡∏°.)'] / 4, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡∏ï‡∏£‡∏ß.)': round(results_sqm['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡∏ï‡∏£‡∏°.)'] / 4, 2),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°)': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°)'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô)': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô)'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏ß‡∏°)': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏ß‡∏°)'],
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢': results_sqm['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢']
    }
    return results_sqw


# --- 5. Streamlit UI ---
st.set_page_config(
    page_title="Layout Project Predictor",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("üè° ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
st.markdown("‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô.")

# Display Model Performance Metrics in the sidebar
st.sidebar.header("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)")
st.sidebar.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏ß‡∏°) - ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (MEP)", value=f"{metrics_total_units['MEP']:.2f}%")
st.sidebar.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏ß‡∏°) - R-squared ($R^2$)", value=f"{metrics_total_units['R2']:.2f}")
st.sidebar.markdown("---")
st.sidebar.metric(label="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ - ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (MEP)", value=f"{metrics_dist_area['MEP']:.2f}%")
st.sidebar.metric(label="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ - R-squared ($R^2$)", value=f"{metrics_dist_area['R2']:.2f}")
st.sidebar.markdown("---")
st.sidebar.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢ - ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (MEP)", value=f"{metrics_alleys['MEP']:.2f}%")
st.sidebar.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢ - R-squared ($R^2$)", value=f"{metrics_alleys['R2']:.2f}")

# Get unique values for dropdowns from loaded data
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ unique
unique_land_shapes = df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].unique().tolist() if '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô' in df.columns else []
unique_grades = df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].unique().tolist() if '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£' in df.columns else []
unique_provinces = df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].unique().tolist() if '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' in df.columns else []


# Input widgets
st.header("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
col1, col2 = st.columns(2)
with col1:
    project_area_sqw = st.number_input(
        "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£‡∏ß.)", # Changed to Square Wah
        min_value=250.0, # Equivalent to 1000 sqm (1000/4)
        max_value=250000.0, # Equivalent to 1,000,000 sqm (1,000,000/4)
        value=12500.0, # Equivalent to 50,000 sqm (50,000/4)
        step=250.0, # Equivalent to 1000 sqm (1000/4)
        help="‡∏õ‡πâ‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤"
    )
with col2:
    if unique_land_shapes:
        land_shape = st.selectbox(
            "‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô",
            options=unique_land_shapes,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà"
        )
    else:
        land_shape = st.selectbox(
            "‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô",
            options=["‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"], # Fallback
            help="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"
        )
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'")


col3, col4 = st.columns(2)
with col3:
    if unique_grades:
        project_grade = st.selectbox(
            "‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            options=unique_grades,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô PREMIUM, LUXURY, BELLA)"
        )
    else:
        project_grade = st.selectbox(
            "‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
            options=["‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"], # Fallback
            help="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"
        )
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'")

with col4:
    if unique_provinces:
        province = st.selectbox(
            "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
            options=unique_provinces,
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)"
        )
    else:
        province = st.selectbox(
            "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
            options=["‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"], # Fallback
            help="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"
        )
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'")


if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Dropdown ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" in [land_shape, project_grade, province]:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô dropdowns ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    elif project_area_sqw <= 0:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£' ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0.")
    else:
        # Perform prediction using the SQW function
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì..."):
            predicted_results = predict_project_layout_sqw(
                project_area_sqw_input=project_area_sqw,
                land_shape=land_shape,
                project_grade=project_grade,
                province=province
            )
        
        st.success("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        st.header("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        
        # Display results in an organized way
        results_df = pd.DataFrame(predicted_results.items(), columns=["‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î", "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"])
        st.dataframe(results_df, hide_index=True)
