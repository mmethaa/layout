import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import joblib
import os
import requests
import json
from matplotlib import font_manager as fm

# --- API Configuration ---
GEMINI_API_KEY = ""
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent"

# --- Constants and File Paths ---
MODEL_PATH = "random_forest_model.joblib"
THAI_FONT_FILE = "Sarabun-Regular.ttf"

# --- Helper Functions ---
@st.cache_resource
def call_gemini_api(prompt):
    headers = {
        "Content-Type": "application/json"
    }
    payload = {
        "contents": [
            {
                "role": "user",
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }
    api_key_to_use = GEMINI_API_KEY
    if not api_key_to_use:
        pass
    url = f"{GEMINI_API_URL}?key={api_key_to_use}"
    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        response_json = response.json()
        if 'candidates' in response_json and response_json['candidates']:
            return response_json['candidates'][0]['content']['parts'][0]['text']
        else:
            return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    except requests.exceptions.RequestException as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini API: {e}")
        return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î"

@st.cache_data
def load_and_preprocess_data(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file, sheet_name='Sheet1')
        df.columns = df.columns.str.strip()
        st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
        return None

def plot_area_pie_chart(data, labels):
    fig, ax = plt.subplots()
    ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90, colors=['#1d4ed8', '#60a5fa', '#34d399', '#fbbf24'])
    ax.axis('equal')
    st.pyplot(fig)

def plot_house_bar_chart(result_ml, house_types_list):
    house_data = []
    house_labels = []
    for h_type in house_types_list:
        count = result_ml.get(f'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á ({h_type})', 0)
        if count > 0:
            house_data.append(count)
            house_labels.append(h_type)
    if house_data:
        fig, ax = plt.subplots()
        ax.bar(house_labels, house_data, color=['#1d4ed8', '#3b82f6', '#60a5fa', '#93c5fd', '#f97316'])
        ax.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á')
        ax.set_title('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
        st.pyplot(fig)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

def get_historically_present_house_types(df, grade_input):
    grade_df = df[df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] == grade_input]
    present_house_types = set()
    house_types = ['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå']
    for h_type in house_types:
        if h_type in grade_df.columns and grade_df[h_type].sum() > 0:
            present_house_types.add(h_type)
    return present_house_types

@st.cache_data(show_spinner=False)
def predict_and_analyze(project_area, land_shape, grade, province, ml_model, house_types_list, target_cols,
                        sale_prices, construct_costs, land_cost_sqwah, other_dev_ratio,
                        unit_standard_area_sqwah_dict, historically_present_types):
    """
    Performs a prediction using the trained ML model, applies a correction for house types,
    and calculates financial metrics.
    """
    input_data = pd.DataFrame([[project_area, land_shape, grade, province]],
                              columns=['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'])
    
    predicted_values = ml_model.predict(input_data)[0]
    predicted_dict = {target: target_value for target, target_value in zip(target_cols, predicted_values)}

    for h_type in house_types_list:
        if h_type not in historically_present_types:
            if h_type in predicted_dict:
                predicted_dict[h_type] = 0

    result = {
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£.‡∏ß‡∏≤)': round(project_area, 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ï‡∏£.‡∏ß‡∏≤)': round(predicted_dict.get('‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)', 0), 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô (‡∏ï‡∏£.‡∏ß‡∏≤)': round(predicted_dict.get('‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏°', 0), 2),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ (‡∏ï‡∏£.‡∏ß‡∏≤)': round(predicted_dict.get('‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)', 0), 2),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°': max(0, int(round(predicted_dict.get('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á', 0)))),
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢': max(1, int(round(predicted_dict.get('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢', 0))))
    }
    
    avg_garden_ratio_of_dist = 0.05
    result['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô (‡∏ï‡∏£.‡∏ß‡∏≤)'] = round(result['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ï‡∏£.‡∏ß‡∏≤)'] * avg_garden_ratio_of_dist, 2)
    
    total_gross_revenue = 0
    total_construction_cost = 0
    total_area_from_units = 0

    for h_type in house_types_list:
        col_name = h_type
        num_units = max(0, int(round(predicted_dict.get(col_name, 0))))
        result[f'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á ({h_type})'] = num_units
        total_gross_revenue += num_units * sale_prices.get(h_type, 0)
        total_construction_cost += num_units * construct_costs.get(h_type, 0)
        if h_type in unit_standard_area_sqwah_dict:
            total_area_from_units += num_units * unit_standard_area_sqwah_dict[h_type]
    
    calculated_land_cost = project_area * land_cost_sqwah
    calculated_other_dev_cost = total_gross_revenue * other_dev_ratio
    total_cost = total_construction_cost + calculated_land_cost + calculated_other_dev_cost
    profit = total_gross_revenue - total_cost
    
    result['‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)'] = round(total_gross_revenue, 2)
    result['‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)'] = round(total_cost, 2)
    result['‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)'] = round(profit, 2)
    result['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ï‡∏£.‡∏ß‡∏≤)'] = round(total_area_from_units, 2)
    
    predicted_sale_area = result['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ï‡∏£.‡∏ß‡∏≤)']
    if predicted_sale_area > 0:
        area_diff = predicted_sale_area - total_area_from_units
        result['‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ - ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏õ‡∏•‡∏á)'] = round(area_diff, 2)
        utilization_ratio = total_area_from_units / predicted_sale_area
        result['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (%)'] = round(utilization_ratio * 100, 2)
        if utilization_ratio > 1.05:
            st.warning(f"üí° ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ({total_area_from_units:,.2f} ‡∏ï‡∏£.‡∏ß‡∏≤) "
                        f"‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏ß‡πâ ({predicted_sale_area:,.2f} ‡∏ï‡∏£.‡∏ß‡∏≤) "
                        f"‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ({utilization_ratio*100:,.1f}%). "
                        f"‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏ú‡∏±‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
        elif utilization_ratio < 0.8:
            st.info(f"üí° ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ({total_area_from_units:,.2f} ‡∏ï‡∏£.‡∏ß‡∏≤) "
                    f"‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏ß‡πâ ({predicted_sale_area:,.2f} ‡∏ï‡∏£.‡∏ß‡∏≤) "
                    f"‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å ({((1-utilization_ratio)*100):,.1f}%). "
                    f"‡∏≠‡∏≤‡∏à‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ")
    else:
        result['‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ - ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏õ‡∏•‡∏á)'] = 0
        result['‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (%)'] = 0
        st.warning("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    return result

# --- Streamlit UI: Main App ---
st.title("üìê Smart Layout Predictor (ML Powered)")
st.markdown("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (layoutdata.xlsx - Sheet1.csv) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

st.markdown("---")
@st.cache_resource
def setup_thai_font():
    try:
        if os.path.exists(THAI_FONT_FILE):
            fm.fontManager.addfont(THAI_FONT_FILE)
            plt.rcParams['font.family'] = fm.FontProperties(fname=THAI_FONT_FILE).get_name()
            st.success(f"‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå '{plt.rcParams['font.family']}' ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")
        else:
            thai_fonts = ['Tahoma', 'Sarabun', 'TH SarabunPSK', 'AngsanaUPC', 'CordiaUPC']
            thai_font_path = None
            for font_name in thai_fonts:
                try:
                    font_path_candidate = fm.findfont(fm.FontProperties(family=font_name))
                    if font_path_candidate:
                        thai_font_path = font_path_candidate
                        break
                except Exception:
                    continue
            
            if thai_font_path:
                fm.fontManager.addfont(thai_font_path)
                plt.rcParams['font.family'] = fm.FontProperties(fname=thai_font_path).get_name()
                st.success(f"‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå '{plt.rcParams['font.family']}' ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        plt.rcParams['axes.unicode_minus'] = False
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {e}")
setup_thai_font()

# --- 1. File Uploader and Data Loading ---
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel (Sheet1.csv)", type=["csv", "xlsx"])

if "model_trained" not in st.session_state:
    st.session_state.model_trained = False
    st.session_state.model = None

df = None
if uploaded_file:
    df = load_and_preprocess_data(uploaded_file)

if df is None:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
    st.stop()

# --- Continue only if df is loaded ---
df_original = df.copy()

# --- 2. Data Preprocessing & Model Setup ---
sqm_to_sqwah = 0.25
columns_to_convert = ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏°', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)']
for col in columns_to_convert:
    if col in df.columns:
        df[col] *= sqm_to_sqwah
        
unit_standard_area_sqm = {
    '‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': 5 * 16,
    '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': 10 * 16,
    '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': 15 * 18,
    '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô': 15 * 18,
    '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': 5 * 16
}
unit_standard_area_sqwah = {
    h_type: area_sqm * sqm_to_sqwah for h_type, area_sqm in unit_standard_area_sqm.items()
}
house_types = ['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå']

features = ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']
targets = ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏°', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)']
for h_type in house_types:
    if h_type in df.columns:
        targets.append(h_type)

features = [f for f in features if f in df.columns]
targets = [t for t in targets if t in df.columns]

if not features or not targets:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö Features ‡∏´‡∏£‡∏∑‡∏≠ Targets ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.stop()

X = df[features].copy()
y = df[targets].copy()

for col in ['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']:
    if col in X.columns and X[col].isnull().any():
        mode_val = X[col].mode()[0]
        X.loc[:, col] = X[col].fillna(mode_val)
for col in ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']:
    if col in X.columns and X[col].isnull().any():
        mean_val = X[col].mean()
        X.loc[:, col] = X[col].fillna(mean_val)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

categorical_features = [col for col in ['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'] if col in X.columns]
numerical_features = [col for col in ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'] if col in X.columns]

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ],
    remainder='passthrough'
)

# --- 3. Model Training, Loading, and Tuning ---
st.sidebar.subheader("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•")
run_tuning = st.sidebar.checkbox("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• (Hyperparameter Tuning) ‡πÉ‡∏´‡∏°‡πà?", value=False)
train_button = st.sidebar.button("‡∏ù‡∏∂‡∏Å/‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•", key='train_button')

if train_button or (not st.session_state.model_trained and uploaded_file):
    if run_tuning:
        st.sidebar.subheader("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô Hyperparameter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û R¬≤ ...")
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Hyperparameter ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...'):
            pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                        ('regressor', RandomForestRegressor(random_state=42, n_jobs=-1))])
            param_grid = {
                'regressor__n_estimators': [100, 200, 300, 400],
                'regressor__max_depth': [5, 10, 15, None],
                'regressor__min_samples_split': [2, 5, 10]
            }
            grid_search = GridSearchCV(pipeline, param_grid, cv=3, scoring='r2', n_jobs=-1, verbose=1)
            grid_search.fit(X_train, y_train)
            st.session_state.model = grid_search.best_estimator_
        st.sidebar.success(f"‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Best Parameters: {grid_search.best_params_}")
    else:
        st.sidebar.subheader("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• RandomForestRegressor...'):
            regressor = RandomForestRegressor(n_estimators=300, max_depth=10, random_state=42, n_jobs=-1)
            st.session_state.model = Pipeline(steps=[('preprocessor', preprocessor),
                                                     ('regressor', regressor)])
            st.session_state.model.fit(X_train, y_train)
        st.sidebar.success("‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    st.session_state.model_trained = True

# --- 4. Model Evaluation ---
if st.session_state.model_trained:
    model = st.session_state.model
    st.sidebar.subheader("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
    try:
        y_pred_test = model.predict(X_test)
        st.sidebar.write("**‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°**")
        st.sidebar.markdown(f"- **MAE ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:** {mean_absolute_error(y_test, y_pred_test):,.2f}")
        st.sidebar.markdown(f"- **R¬≤ ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:** {r2_score(y_test, y_pred_test):.4f}")
    except Exception as e:
        st.sidebar.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")

# --- 5. User Inputs and Prediction ---
if st.session_state.model_trained:
    st.subheader("üìà ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
    st.markdown("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏±‡∏á, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á, ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£")

    with st.expander("‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", expanded=False):
        st.markdown("‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£")
        col1, col2, col3 = st.columns(3)
        sale_price_th = col1.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ ‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏° (‡∏ö‡∏≤‡∏ó)", value=2_500_000, step=100_000, key='sale_th')
        sale_price_ba = col2.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î (‡∏ö‡∏≤‡∏ó)", value=4_000_000, step=100_000, key='sale_ba')
        sale_price_bd = col3.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏ö‡∏≤‡∏ó)", value=6_000_000, step=100_000, key='sale_bd')
        sale_price_bd3 = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)", value=9_000_000, step=100_000, key='sale_bd3')
        sale_price_comm = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå (‡∏ö‡∏≤‡∏ó)", value=5_000_000, step=100_000, key='sale_comm')
        col4, col5, col6 = st.columns(3)
        cost_th = col4.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏° (‡∏ö‡∏≤‡∏ó)", value=1_500_000, step=50_000, key='cost_th')
        cost_ba = col5.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î (‡∏ö‡∏≤‡∏ó)", value=2_500_000, step=50_000, key='cost_ba')
        cost_bd = col6.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏ö‡∏≤‡∏ó)", value=3_500_000, step=50_000, key='cost_bd')
        cost_bd3 = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)", value=5_500_000, step=50_000, key='cost_bd3')
        cost_comm = st.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå (‡∏ö‡∏≤‡∏ó)", value=3_000_000, step=50_000, key='cost_comm')
        col7, col8 = st.columns(2)
        land_cost_per_sqwah = col7.number_input("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏ß‡∏≤)", value=50000, step=1000, key='land_cost')
        other_development_cost_ratio = col8.slider("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ (% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)", min_value=0.0, max_value=0.3, value=0.20, step=0.01, key='other_cost_ratio')
    sale_price_per_unit = {'‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': sale_price_th, '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': sale_price_ba, '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': sale_price_bd, '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô': sale_price_bd3, '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': sale_price_comm}
    construction_cost_per_unit = {'‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': cost_th, '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': cost_ba, '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': cost_bd, '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß3‡∏ä‡∏±‡πâ‡∏ô': cost_bd3, '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': cost_comm}
    input_col1, input_col2 = st.columns(2)
    project_area_input = input_col1.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£.‡∏ß‡∏≤)",
                                                  min_value=float(X['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].min()),
                                                  max_value=float(X['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].max()),
                                                  value=float(X['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].mean()),
                                                  step=500.0)
    land_shape_options = X['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].dropna().unique().tolist()
    land_shape_input = input_col2.selectbox("‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô", land_shape_options)
    grade_options = X['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].dropna().unique().tolist()
    grade_input = st.selectbox("‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", grade_options)
    province_options = X['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique().tolist()
    province_input = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", province_options)

    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", key='predict_button'):
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•...'):
            historically_present_types = get_historically_present_house_types(df_original, grade_input)
            result_ml = predict_and_analyze(
                project_area_input, land_shape_input, grade_input, province_input,
                model, house_types, targets, sale_price_per_unit, construction_cost_per_unit,
                land_cost_per_sqwah, other_development_cost_ratio, unit_standard_area_sqwah, historically_present_types
            )
        st.subheader("üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å ML")
        st.dataframe(pd.DataFrame(result_ml.items(), columns=['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', '‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢']), use_container_width=True)
        st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û")
        chart_col1, chart_col2 = st.columns(2)
        with chart_col1:
            st.write("#### ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà")
            area_data = [
                result_ml['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ï‡∏£.‡∏ß‡∏≤)'],
                result_ml['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ (‡∏ï‡∏£.‡∏ß‡∏≤)'],
                result_ml['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô (‡∏ï‡∏£.‡∏ß‡∏≤)'],
                result_ml['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô (‡∏ï‡∏£.‡∏ß‡∏≤)']
            ]
            area_labels = ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô']
            plot_area_pie_chart(area_data, area_labels)
        with chart_col2:
            st.write("#### ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡πâ‡∏≤‡∏ô")
            plot_house_bar_chart(result_ml, house_types)
        st.subheader("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Executive Summary ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ AI", key='summary_button'):
            with st.spinner('AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...'):
                summary_prompt = f"""
                ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Executive Summary ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
                - **‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** {result_ml['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£.‡∏ß‡∏≤)']:,.2f} ‡∏ï‡∏£.‡∏ß‡∏≤
                - **‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢:** {result_ml['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ï‡∏£.‡∏ß‡∏≤)']:,.2f} ‡∏ï‡∏£.‡∏ß‡∏≤
                - **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°:** {result_ml['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°']:,.0f} ‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
                - **‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô:** ‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏° {result_ml.get('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°)', 0):,.0f} ‡∏´‡∏•‡∏±‡∏á, ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î {result_ml.get('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)', 0):,.0f} ‡∏´‡∏•‡∏±‡∏á, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß {result_ml.get('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)', 0):,.0f} ‡∏´‡∏•‡∏±‡∏á
                - **‡∏Å‡∏≥‡πÑ‡∏£‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:** {result_ml['‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)']:,.2f} ‡∏ö‡∏≤‡∏ó
                - **‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢:** {result_ml.get('‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (%)', 0):,.2f}%
                
                ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏±‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå.
                """
                summary_text = call_gemini_api(summary_prompt)
                st.markdown("---")
                st.markdown("#### Executive Summary ‡∏à‡∏≤‡∏Å AI")
                st.write(summary_text)

    # --- 6. Best Option Analysis ---
    st.subheader("üí° ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)")
    st.markdown("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ '‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)' ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    analysis_land_shape = st.selectbox("‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].dropna().unique().tolist(), key='analysis_land_shape')
    analysis_province = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique().tolist(), key='analysis_province')
    analysis_project_area = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£.‡∏ß‡∏≤)", min_value=1000.0, value=40000.0, step=500.0, key='analysis_project_area')
    if st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", key='best_option_button'):
        if st.session_state.model_trained:
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...'):
                best_grade_results = []
                available_grades_for_analysis = df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].dropna().unique().tolist()
                for grade_option in available_grades_for_analysis:
                    historically_present_types = get_historically_present_house_types(df_original, grade_option)
                    predicted_output = predict_and_analyze(
                        analysis_project_area, analysis_land_shape, grade_option, analysis_province,
                        model, house_types, targets, sale_price_per_unit, construction_cost_per_unit,
                        land_cost_per_sqwah, other_development_cost_ratio, unit_standard_area_sqwah, historically_present_types
                    )
                    predicted_output['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] = grade_option
                    best_grade_results.append(predicted_output)
                results_df = pd.DataFrame(best_grade_results)
                if not results_df.empty:
                    results_df_sorted = results_df.sort_values(by='‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)', ascending=False).reset_index(drop=True)
                    st.write("### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° '‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)'")
                    st.dataframe(results_df_sorted, use_container_width=True)
                    best_option = results_df_sorted.iloc[0]
                    st.success(f"**‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠: ‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ '{best_option['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£']}'** "
                                f"‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ '‡∏Å‡∏≥‡πÑ‡∏£' ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà: **{best_option['‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)']:,.2f} ‡∏ö‡∏≤‡∏ó**")
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
